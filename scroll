// ==UserScript==
// @name         scroll and softblock
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  My Tampermonkey script
// @match        https://queue.ticketmaster.sg/*
// @match        https://tixcraft.queue-it.net/*
// @grant        none
// @updateURL    https://raw.githubusercontent.com/bfdissfho/My-Script/main/scroll
// @downloadURL  https://raw.githubusercontent.com/bfdissfho/My-Script/main/scroll
// ==/UserScript==


(function() {
  // Function to scroll to the target element
  function scrollToTargetElement() {
    // Get a reference to the target element by its ID
    var targetElement = document.getElementById("solution");

    // Check if the target element exists
    if (targetElement) {
      // Scroll to the target element
      targetElement.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  }

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function startObservingMutations() {
    let checkboxElement = document.querySelector('button.botdetect-button.btn');
    console.log("000");
    if (checkboxElement) {
      let observer = new MutationObserver(async function(mutationsList) {
        for (let mutation of mutationsList) {
          if (mutation.addedNodes && mutation.addedNodes.length > 0) {
            console.log("123");
            let anticapture_solve = document.querySelector('div.antigate_solver.solved');
            if (anticapture_solve) {
              console.log("456");
              console.log("789");
              checkboxElement.click();
                await sleep(2000);
              // Disconnect the observer immediately after clicking checkboxElement
              observer.disconnect();
              setTimeout(startObservingMutations, 7000);
            }
          }
        }
        await sleep(2000);
        console.log("111");
        checkboxElement = document.querySelector('button.botdetect-button.btn'); // Check checkboxElement again
        if (checkboxElement) {
          setTimeout(startObservingMutations, 5000)
        }else{observer.disconnect()};
      });

      // Start observing changes in the document
      observer.observe(document, { childList: true, subtree: true });
    }
  }

  // Call the scroll function to scroll to the target element with a delay
  setTimeout(function() {
    scrollToTargetElement();
    // Start observing mutations after scrolling
    setTimeout(startObservingMutations, 7000); // 7 seconds delay (adjust as needed)
  }, 2000); // 2 seconds delay (adjust as needed)
})();
